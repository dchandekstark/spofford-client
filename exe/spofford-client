#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))

require 'spofford/client'
require 'tempfile'
require 'optparse'



options = Spofford::Config::DEFAULT_CONFIG

optparser = OptionParser.new do |opts|
  exe_name = File.basename($PROGRAM_NAME)
  opts.banner = "
    The Spofford Client allows you to interact with Spofford (TRLN Shared Index Ingest) via the command line

    Usage: #{exe_name} [options] file1 [file2 file3, ... ]

        File arguments:
            If only one filename is provided, it will be treated as either a JSON file containing Argot data,
            or a pre-assembled

        if multiple filenames are provided, they will be treassembled into an 'ingest package' (zip file)
        before submission to the
  "

  opts.on('-c', '--config-file', 'Specify configuration file (default: config.yml in the current directory)') do |config_file|
    options[:config_file] = config_file
  end

  opts.on('--create-config', 'Interactively create a configuration file (config.yml) in the current directory') do
    options[:create_config] = true
  end

  opts.on('-u', '--url', 'Base URL to the Spofford instance') do |base_url|
    options[:base_url] = base_url
  end

  opts.on('-o' '--owner', 'Institution (record owner) you represent') do |owner|
    options[:owner] = owner
  end

  opts.on('-s', '--store', 'Directory or filename to store any created ingest packages') do |package_location|
    options[:package_storage_location] = package_location
  end

  opts.on('-p', '--package-only', 'Select this to generate but not submit an ingest package.  Useful for testing') do
    options[:package_only] = true
  end

  opts.on('-t', '--test', 'Display options resulting from configuration file and command-line switches, then exit') do
    options[:test] = true
  end

  opts.on('-v', '--verbose', 'Verbose output -- log all activities to console') do
    options[:verbose] = true
  end

  opts.on('-z', '--force-zip', 'Force ZIP ingest package creation even if only one JSON file is supplied') do
    options[:force_zip] = false
  end
end

begin
  optparser.parse!
  verbose = options[:verbose]
  cf = options[:config_file] ||= File.join(Dir.getwd, 'config.yml')

  if File.exist?(cf)
      puts "Loading confguration from #{cf}" if verbose
      from_file = YAML.load(File.open(cf))
      options.update(from_file)
  end
rescue OptionParser::InvalidOption => error
  puts "Unrecognized option: #{error}"
  puts optparser.error
  exit 1
end

# users can set ingest_url explicitly, but probably shouldn't
options[:ingest_url]||= "#{options[:base_url]}/ingest/#{options[:owner]}"
puts "Ingest url set to #{options[:ingest_url]}" if verbose

files = ARGV.select { |f| File.exist?(f) }
if verbose
  puts 'Found ingest files:'
  files.each { |f| puts "\t#{f}" }
end

if options[:test]
  puts "\tconfiguration file: #{options[:config_file]} : exists? #{File.exist?(options[:config_file])}"
  puts "\tcreate configuration? #{options[:create_config] || false}"
  puts "\tOwner/Institution: #{options[:owner]}"
  if not options.has_key?(:owner) or options[:owner].empty?
    puts "\t\tBest guess: '#{Spofford.guess_owner}' -- but use -o on command line or set :owner in configuration file"
  end
  puts "\tSpofford URL: #{options[:base_url]}"
  puts "\t\tIngest URL: #{options[:ingest_url]}"
  puts "\tIngest package storage file/directory: #{options[:package_storage_location]}"
  puts "\tCreate ingest package only, do not send to Spofford: #{options[:package_only]}"
  puts "\tForce zip creation: #{options[:force_zip]}"
  begin
    tf1 = Tempfile.new()
    tf2 = Tempfile.new()

    if files.empty?
      puts "\n\t\t( no files supplied, simulating multi-file submission )\n"
      # create a couple of files to show where a zipfile would be created
      tf1.write "test1"
      tf2.write "test2"
      files = [tf1,tf2]
    end
    packager = Spofford::Client::Packager.new(files, options)
    puts "\tIngest package file: #{ packager.get_package }"
  rescue
    tf1.close
    tf2.close
    tf1.unlink
    tf2.unlink
  end
  puts "Done."

  exit
end

if options[:create_config]
  Spofford::Config.create_config(cf)
  exit
end

if not options[:owner]
  puts "Onwer not specified!"
  puts "I can guess value of '#{Spofford.guess_owner}' from your hostname, but you should be explicit!"
  puts "Please use the -o flag on the command line, or add :owner to your configuration file"
  exit 1
end

if files.empty?
  puts "\tError: you must supply one or more (existing) files to be ingested"
  puts "\t\tno files aupplied" if ARGV.empty?
  ARGV.each { |f|
    puts "\t\t#{f} not found" unless File.exist?(f)
  }
  puts optparser.help
  exit 1
end

packager = Spofford::Client::Packager.new(ARGV, options)
package = packager.get_package

return "Package created at #{package}" if verbose
if options[:package_only]
  exit
end

client = Spofford::Client.create(options)
client.send(package)


